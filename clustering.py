from statistics import mean
from collections import defaultdict
from copy import deepcopy, copy
import numpy as np
import random
import pandas as pd
import matplotlib.pyplot as plt
import math

def convertPointsToArray(points, delimiter):
    """
    Convert a array of strings into a two-dimensional array of gene expression data points

    - points: a set of data points represented as an array of strings where each string consists of
              individual data points
    - delimiter: the character that separates values within a given string
    """
    new_points = []
    for point in points:
        point = point.split(delimiter)
        new_point = tuple([float(num) for num in point])
        new_points.append(new_point)
    return new_points

def FarthestFirstTraversal(data, k):
    """
    Create a set of clusters by choosing centers such that they are as far away
    from one another as possible

    - data: the entire set of data points
    - k: the number of clusters to be formed
    """
    # arbitrarily initialize the first center
    centers = set([data[0]])
    # find the data points which are furthest away from the other centers
    while len(centers) < k:
        pointsLeft = set(data).difference(centers)
        centers.add(findFarthestDistanceToCenter(centers, pointsLeft))
    return centers

def findClosestCenter(centers, point):
    """
    Identifies the "center" which is closest to a given point

    - centers: a set of points which represent the "centers" of the existing clusters
    - point: a data point which should be grouped into an existing cluster
    """
    minDist = float("inf")
    closestCenter = None
    for center in centers:
        dist = np.linalg.norm(np.array(point)-np.array(center))
        if dist < minDist:
            minDist = dist
            closestCenter = center
    return closestCenter

def findMostLikelyCenter(centers, data):
    """
    Given an incomplete set of centers and a set of data points, find the data point
    that would most likely form the center of a new cluster

    - centers: a set of points which represent the "centers" of the existing clusters
    - data: the entire set of data points
    """
    inverse_dist_squared = []
    for point in data:
        if point not in centers:
            minDist = float("inf")
            for center in centers:
                dist = np.linalg.norm(np.array(point) - np.array(center))
                # identify the distance between a given point and its nearest cluster
                if dist < minDist:
                    minDist = dist
            # Calculate the inverse of the distance squared
            inverse_dist_squared.append(1/(minDist**2))
    # use a weighted probability distribution to identify a data point which should be the next "center" or "cluster"
    idx = np.random.choice(range(0, len(data)), 1, inverse_dist_squared)
    return data[idx[0]]

def createDistanceTable(centers, data):
    """
    Creates a mapping of each data point to the distance from its nearest center

    - centers: a set of points which represent the "centers" of the existing clusters
    - data: the entire set of data points
    """
    distanceTable = {}
    # iterate through each point
    for point in data:
        minDist = float("inf")
        # iterate through each center
        for center in centers:
            dist = np.linalg.norm(np.array(point) - np.array(center))
            # if the specified center is closer to the specified point, change the minimum distance threshold
            if dist < minDist:
                minDist = dist
        # set the mapping for the point to the distance from its nearest center
        distanceTable[point] = minDist
    return distanceTable

def findFarthestDistanceToCenter(centers, data):
    """
    Identify the point which is farthest away from its nearest center

    - centers: a set of points which represent the "centers" of the existing clusters
    - data: the entire set of data points
    """
    distanceTable = createDistanceTable(centers, data)
    return max(distanceTable, key=lambda key:distanceTable[key])

def computeSquaredError(centers, data):
    """
    Computes the squared error of the distance between each point and its closest center

    - centers: a set of points which represent the "centers" of the existing clusters
    - data: the entire set of data points
    """
    distanceTable = createDistanceTable(centers, data)
    return 1/len(data)*sum([dist**2 for dist in distanceTable.values()])

def calculateCenterOfGravity(points, m):
    """
    Calculate the center of gravity for points in a given cluster

    - points: a set of data points within a specific cluster
    - m: the number of dimensions of each data point
    """
    centerOfGravity = []
    for i in range(m):
        # calculate the average value of the ith coordinate
        centerOfGravity.append(mean([point[i] for point in points]))
    return tuple(centerOfGravity)


def LloydAlgorithm(data, k, m):
    """
    Identify the centers which optimally cluster the given data points (according to the Lloyd Algorithm)

    - data: the entire set of data points
    - k: the number of "centers" or "clusters" that categorize the data points
    - m: the number of dimensions of each data point
    """
    # initialize a group of points to act as the centers of each cluster
    centers = kMeansInitializer(data, k)
    hasConverged = False
    # continue reassigning centers until convergence to a local optimum
    while not hasConverged:
        centerAssignments = defaultdict(list)
        newCenters = set([])
        for point in data:
            centerAssignments[findClosestCenter(centers, point)].append(point)
        for center in centerAssignments.keys():
            centerOfGravity = calculateCenterOfGravity(centerAssignments[center], m)
            newCenters.add(centerOfGravity)
        if centers == newCenters:
            hasConverged = True
        else:
            centers = deepcopy(newCenters)
    return newCenters

def kMeansInitializer(data, k):
    """
    Create a set of centers to be used at the start of the Lloyd Algorithm

    - data: the entire set of data points
    - k: the number of "centers" or "clusters" that categorize the data points
    """
    centers = set([])
    # Choose the first center randomly
    centers.add(random.choice(data))
    # Continue choosing centers until reaching the desired number of clusters
    while len(centers) < k:
        centers.add(findMostLikelyCenter(centers, data))
    return centers

def modifyHiddenMatrix(hidden, centers, point, beta):
    """
    Modify the hidden matrix to reflect the probabilities that a point belongs to a given cluster

    - hidden: a k x n matrix where hidden(i,j) is the probability that point j belongs to cluster i
    - centers: a set of points which represent the "centers" of the existing clusters
    - point: a particular data point
    - beta: a parameter used in the partition function
    """
    denominator = 0
    numerators = []
    for center in centers:
        dist = np.linalg.norm(np.array(point) - np.array(center))
        # use the partition function to calculate a numerator for each distance
        numerator = math.e**(-1*beta*(dist))
        numerators.append(numerator)
        # add to the denominator
        denominator+=numerator
    for i in range(len(centers)):
        # append the probability that a point belongs to a given center
        hidden[i].append(numerators[i]/denominator)

def softKMeansClustering(data, k, m, beta, precision):
    """
    Identify the centers which optimally cluster the given data points (according to the
    soft k-means clustering algorithm)

    - data: a set of n data points
    - k: the number of "centers" or "clusters" that categorize the data points
    - m: the number of dimensions of each data point
    - beta: a parameter used in the partition function
    - precision: the number of decimal points after which two values are considered equivalent
    """
    # initialize a group of points to act as the centers of each cluster
    centers = kMeansInitializer(data, k)
    hasConverged = False
    one_norm = [1 for i in range(len(data))]
    # continue reassigning points to clusters until convergence to a local optimum
    while not hasConverged:
        # create a new hidden k x n matrix
        hiddenMatrix = [[] for i in range(len(centers))]
        newCenters = set([])
        # populate the hidden matrix for each data point
        for point in data:
            modifyHiddenMatrix(hiddenMatrix, centers, point, beta)
        # calculate a new set of centers which maximizes the probability that each point belongs to their cluster
        for i in range(len(centers)):
            newCenter = []
            hidden_norm = np.dot(hiddenMatrix[i],one_norm)
            for j in range(m):
                data_vec = [val[j] for val in data]
                newCenter.append(np.dot(hiddenMatrix[i], data_vec)/hidden_norm)
            # round the values in the new center based on the set precision
            newCenter = [round(val, precision) for val in newCenter]
            # if 2 centers are extremely similar in precision, the number of clusters will reduce from k to k-1
            newCenters.add(tuple(newCenter))
        if centers == newCenters:
            hasConverged = True
        else:
            centers = deepcopy(newCenters)
    return newCenters

def createVisualization(centers, points):
    """
    Create a visualization of the clustering algorithm output

    - centers: a set of points which represent the "centers" of the existing clusters
    - points: the entire set of data points
    """
    clusters = defaultdict(lambda: defaultdict(list))
    for point in points:
        closestCenter = findClosestCenter(centers, point)
        for i in range(m):
            clusters[closestCenter][i].append(point[i])
    df_arr = []
    for center in clusters.keys():
        new_df = pd.DataFrame.from_dict(clusters[center])
        new_df = new_df.swapaxes("index", "columns")
        df_arr.append(new_df)
    for i in range(len(df_arr)):
        plt.subplot(2, 3, i + 1)
        plt.plot(df_arr[i])
        plt.xlabel("Time Interval")
        plt.ylabel("Gene Expression")
    fig = plt.gcf()
    fig.suptitle("Clustering Analysis of Yeast Expression During Diauxic Shift")
    plt.show()

def convertPointsToMatrix(points):
    """
    Convert an array of strings into an n x n matrix

    - points: a set of data points represented as an array of strings where each string consists of
              individual data points
    """
    matrix = []
    for row in points:
        matrix.append([float(val) for val in row.split(' ')])
    return matrix

def findClosestClusters(clusters, D):
    """
    Identify the 2 closest clusters within the D matrix

    - D: an n x n matrix where D(i,j) is the Euclidean distance between the expression vectors of genes i and j
    """
    closestClusters = [None, None]
    closestDistance = float("inf")
    for cluster1 in clusters.keys():
        for cluster2 in clusters.keys():
            if cluster1 != cluster2:
                dist = D[cluster1][cluster2]
                if dist < closestDistance:
                    closestDistance = dist
                    closestClusters = [cluster1, cluster2]
    return closestClusters

def hierarchicalClustering(D, n):
    """
    Create a clustering tree that indicates the sub-clusters within clusters

    - D: an n x n matrix where D(i,j) is the Euclidean distance between the expression vectors of genes i and j
    - n: the number of gene expression vectors
    """
    clusters = defaultdict(list)
    tree = []
    # initialize each cluster so that every cluster contains itself
    for i in range(n):
        clusters[i].append(i)
    # continue iterating until the entire dataset is consolidated under 1 cluster
    while len(clusters.keys()) > 1:
        newClusters = defaultdict(list)
        # identify the 2 closest clusters
        cluster1, cluster2 = findClosestClusters(clusters, D)
        maxCluster = max(cluster1, cluster2)
        # let maxCluster consume the other closest cluster
        newClusters[maxCluster].extend(clusters[cluster1])
        newClusters[maxCluster].extend(clusters[cluster2])
        # add the clusters in the maxCluster as a new row in the tree
        tree.append(newClusters[maxCluster])
        # copy over the values from the unmodified clusters
        for cluster in clusters.keys():
            if cluster not in [cluster1, cluster2]:
                newClusters[cluster] = deepcopy(clusters[cluster])
        # initialize a new value for maxCluster in the D matrix
        for i in range(n):
            distArr = [D[cluster][i] for cluster in newClusters[maxCluster]]
            D[maxCluster][i] = D[i][maxCluster] = sum(distArr)/len(distArr)
        clusters = newClusters
    return tree


#===============LLOYD ALGORITHM FOR K-MEANS CLUSTERING=================================================================

k = 6
m = 7
points = ["0.13606155	-0.111031312	-0.189033824	-0.782408565	-0.757023247	-0.855989697	-2.304511042", "-0.286881148	-0.084064265	0.184424571	0.13606155	0.535331733	2.321928095	1.251538767", "-0.042644337	-0.097610797	-0.014355293	-0.799087306	-0.839959587	-2.247927513	-2.386810946", "-0.056583528	-0.124328135	-0.070389328	-0.545968369	-0.555816155	-2.10433666	-2.367371066", "0.01449957	0.074000581	0.058893689	0.01449957	0.251538767	2.395928676	1.689659879", "0.13606155	-0.042644337	-0.298658316	-0.871843649	-1.14404637	-2.422233001	-2.722466024", "0.074000581	0.13606155	0.434402824	0.836501268	0.943416472	3.64385619	3.321928095", "-0.189033824	-0.028569152	0.59946207	0.888968688	0.836501268	2.556393349	2.64385619", "-0.250961574	0.13606155	-0.22650853	0.862496476	0.621488377	2.556393349	2.395928676", "-0.111031312	0.058893689	0.01449957	0.104697379	0.304006187	2.736965594	3.321928095", "-0.028569152	-0.097610797	0.358453971	0.434402824	0.377069649	2.556393349	1.251538767", "0.074000581	0.304006187	0.49410907	0.473931188	0.377069649	2.321928095	1.473931188", "0.184424571	0.434402824	0.943416472	1.514573173	1.64385619	2.321928095	1.59946207", "0.152003093	0.76121314	1.286304185	1.943416472	1.514573173	2.184424571	2.64385619", "0.043943348	0.01449957	0.395928676	-0.163498732	-0.275007047	-1.111031312	-2.443606651", "0.104697379	0.152003093	0.104697379	0.058893689	0.043943348	-0.604071324	-2.364572432", "-0.014355293	-0.084064265	-0.124328135	-1.03562391	-1.124328135	-2.021479727	-2.799087306", "0.321928095	0.120294234	0.089267338	-0.344828497	-0.250961574	-1.646162657	-2.545968369", "0.200912694	0.168122759	0.286304185	-0.201633861	-0.201633861	-1.752748591	-2.996388746", "-0.137503524	0.268816758	0.415037499	0.785875195	0.713118852	2.321928095	1.029146346", "-0.516015147	0.074000581	0	-0.214124805	-0.5360529	1.943416472	2.321928095", "0.168122759	0.029146346	0.377069649	0.862496476	0.810966176	2.184424571	2.556393349", "-0.070389328	0.058893689	0.577766999	0.415037499	0.01449957	2.736965594	2.395928676", "0.074000581	0	0.689659879	0.514573173	0.152003093	1.689659879	2.473931188", "-0.286881148	0.120294234	0.49410907	0.836501268	0.49410907	2.64385619	2.836501268", "-0.084064265	-0.298658316	0.074000581	0.074000581	-0.35614381	1.321928095	2.321928095", "0.089267338	0.268816758	0.556393349	0.888968688	0.943416472	1.943416472	2.321928095", "-0.250961574	0.104697379	-0.150559677	-0.22650853	-0.35614381	2.556393349	2.184424571", "-0.584962501	0.168122759	0.184424571	-0.150559677	-0.82374936	2.473931188	2.64385619", "0.200912694	0.089267338	0.321928095	-0.321928095	-0.475084883	-1.641546029	-2.464668267", "-0.275007047	-0.150559677	0.168122759	-0.35614381	-0.495695163	1.120294234	3.184424571", "-0.189033824	0.358453971	1.029146346	1.514573173	1.64385619	2.184424571	2.64385619", "0.120294234	0.168122759	0.535331733	0.089267338	-0.150559677	0.535331733	3.64385619", "-0.070389328	0.152003093	0.76121314	1.029146346	0.377069649	3.184424571	2.556393349", "0.377069649	0.043943348	0.736965594	0.888968688	0.76121314	3.473931188	2.836501268", "0.358453971	0.13606155	0.473931188	0.043943348	-0.014355293	-1.367371066	-2.488000771", "-0.014355293	0.184424571	1.152003093	1.514573173	1.59946207	3.473931188	3.321928095", "0.234465254	0	-0.042644337	-0.641546029	-0.933572638	-1.5360529	-2.333423734", "-0.150559677	0.377069649	0.621488377	1.59946207	2.251538767	3.64385619	3.473931188", "-0.678071905	-0.367371066	-0.137503524	-0.275007047	-0.176322773	2.473931188	0.971430848", "-0.40053793	-0.163498732	0.13606155	0.234465254	0.321928095	2.321928095	2.120294234", "-0.22650853	0.043943348	0.415037499	1.556393349	1.029146346	2.736965594	2.736965594", "0.058893689	-0.111031312	0.029146346	0.321928095	0.621488377	2.395928676	1.888968688", "0.184424571	0.321928095	0.395928676	1	1.473931188	2.556393349	0.377069649", "0.029146346	0	0.043943348	-0.137503524	0	-0.669026766	-2.313245852", "0.200912694	0.377069649	0.286304185	1.152003093	1.473931188	2.836501268	1.836501268", "0.074000581	-0.411426246	-0.028569152	-0.790772038	-0.839959587	-1.695993813	-2.788685711", "-0.014355293	-0.250961574	0.321928095	-0.831877241	-0.831877241	-1.469885976	-2.459431619", "0.029146346	-0.097610797	0.168122759	0	-0.028569152	-1.3950628	-2.550900665", "0.13606155	0.217591435	0.415037499	0.577766999	0.888968688	1.286304185	2.395928676", "0.043943348	-0.070389328	0.029146346	0.029146346	0.888968688	2.473931188	2.321928095", "0.043943348	0.089267338	0.395928676	0.217591435	0.971430848	0.888968688	2.395928676", "-0.137503524	-0.070389328	0.473931188	0.64385619	0.377069649	1.689659879	2.836501268", "-0.056583528	0.043943348	0.49410907	1.120294234	1.058893689	2.736965594	2.058893689", "-0.432959407	-0.731183242	-0.056583528	-0.111031312	-0.163498732	3.473931188	2.64385619", "0.043943348	-0.097610797	0.168122759	-0.344828497	-0.378511623	0.59946207	2.395928676", "0.152003093	0.058893689	0.217591435	0.736965594	0.971430848	3.64385619	2.943416472", "0.152003093	-0.056583528	0.321928095	-0.90303827	-1.10433666	-1.641546029	-2.56315813", "0.200912694	0.104697379	0.058893689	-0.286881148	-0.275007047	-1.819668183	-2.615887074", "0.321928095	0.104697379	-0.250961574	-1.485426827	-1.480265122	-2.508428653	-3.214124805", "0.268816758	0.152003093	0.454031631	-0.367371066	-0.286881148	-1.669026766	-2.451540833", "-0.124328135	-0.189033824	-0.298658316	-0.495695163	-0.641546029	3.473931188	2.836501268", "-0.344828497	-0.275007047	-0.378511623	-0.201633861	-0.411426246	3.184424571	2.473931188", "0.043943348	0.268816758	0.76121314	0.943416472	1.473931188	2.395928676	2.058893689", "-0.298658316	-0.389566812	0.434402824	0.666576266	1.395928676	4.058893689	2.473931188", "0.415037499	0.434402824	0	-0.722466024	-0.815575429	-2.555816155	-2.087462841", "0.168122759	0.321928095	0.104697379	-0.084064265	-0.176322773	-1.803227036	-2.855989697", "-0.443606651	0.120294234	0.64385619	1	0.785875195	2.943416472	2.473931188", "0.340075442	0.217591435	0.184424571	-0.176322773	-0.50589093	-1.565597176	-2.513490746", "0	0.152003093	0.395928676	0.13606155	-0.056583528	-1.097610797	-2.397802962", "0.104697379	-0.014355293	0.556393349	-0.575312331	-0.731183242	-1.250961574	-2.521050737", "0.200912694	0.029146346	0.200912694	0.415037499	0.76121314	2.184424571	2.473931188", "-0.411426246	-0.422233001	-0.111031312	0.104697379	0.888968688	2.943416472	0.971430848", "-0.201633861	-0.333423734	-0.137503524	-0.713695815	-0.464668267	-2.169925001	-2.634593268", "-0.124328135	-0.042644337	0.666576266	0.321928095	-0.321928095	1.434402824	3.058893689", "0.286304185	0.268816758	0.556393349	0.64385619	0.577766999	2.395928676	1.251538767", "0.234465254	0.074000581	0.234465254	-0.713695815	-0.669026766	-1.871843649	-2.344828497", "0.120294234	0.200912694	0.074000581	-0.411426246	-0.992768431	-1.516015147	-2.480265122", "-0.150559677	0.200912694	0	-0.40053793	-0.941106311	0.321928095	2.64385619", "0.304006187	0.089267338	0.268816758	-0.214124805	-0.176322773	-1.372952098	-2.339137385", "0.268816758	-0.014355293	-0.22650853	-0.941106311	-1.23878686	-2.327687364	-2.957914599", "-0.056583528	-0.495695163	-0.411426246	-0.641546029	-0.704871964	-1.956056652	-2.44625623", "-0.084064265	0.13606155	0.666576266	1.089267338	1.473931188	2.943416472	1.089267338", "-0.333423734	-0.35614381	-0.298658316	0.043943348	-0.084064265	2.395928676	1.286304185", "0.234465254	0.556393349	0.377069649	0.120294234	0.49410907	1.434402824	2.943416472", "-0.97819563	-0.263034406	0.217591435	-0.250961574	1.321928095	3.473931188	1.785875195", "0.058893689	0.377069649	0.785875195	0.377069649	0.043943348	2.736965594	1.358453971", "-0.014355293	0.395928676	0.358453971	1	1.434402824	3.473931188	2.836501268", "-0.333423734	-0.189033824	0.415037499	-0.084064265	-0.485426827	1	2.321928095", "-0.632268215	-0.344828497	-0.23878686	-0.189033824	-0.250961574	1.120294234	3.058893689", "-0.084064265	0.029146346	-0.111031312	-1.176322773	-1.084064265	-3.234194723	-1.989139007", "0.184424571	-0.084064265	0.340075442	-0.070389328	-0.475084883	-1.464668267	-2.358958826", "0.089267338	-0.201633861	0.168122759	-0.757023247	-0.678071905	-1.292781749	-2.414135533", "0.340075442	0.13606155	0.13606155	-0.422233001	-0.622930351	-1.933572638	-2.389566812", "0.120294234	-0.189033824	0.340075442	0.089267338	-0.084064265	-1.459431619	-2.324810603", "-0.613531653	-0.464668267	1.089267338	-0.124328135	-0.176322773	1.358453971	3.64385619", "-0.411426246	0.217591435	0.200912694	0.340075442	0.943416472	2.836501268	1.434402824", "0.104697379	0.089267338	0.168122759	-0.378511623	-0.411426246	-1.855989697	-2.480265122", "0.074000581	0.058893689	-0.250961574	-0.565597176	-0.422233001	-1.5360529	-2.613531653", "-0.150559677	-0.443606651	-0.097610797	-0.790772038	-1.077242999	-2.039138394	-2.521050737", "-0.189033824	-0.150559677	0.029146346	0.268816758	0.535331733	3.64385619	2.736965594", "-0.163498732	0.184424571	0.043943348	-0.22650853	-0.422233001	1.785875195	2.395928676", "0.358453971	0.64385619	0.689659879	0.043943348	-0.275007047	1.64385619	2.473931188", "0.074000581	-0.150559677	-0.014355293	-0.925999419	-0.722466024	-2.15704371	-2.435628594", "0.043943348	0.01449957	0.286304185	0.915935735	1.358453971	2.836501268	2.556393349", "-0.070389328	0.377069649	0.473931188	0.888968688	1.321928095	2.395928676	1.689659879", "0.234465254	0.577766999	1.029146346	0.666576266	0.621488377	2.556393349	3.184424571", "0.358453971	0.168122759	0.64385619	0.785875195	1.152003093	1.943416472	2.64385619", "-0.070389328	0.217591435	0.234465254	0.49410907	1.029146346	2.473931188	1.152003093", "-0.124328135	0.234465254	0.577766999	0.621488377	0.251538767	2.556393349	1.785875195", "0.043943348	0.074000581	0.200912694	-0.163498732	-0.40053793	2.120294234	3.321928095", "-0.056583528	-0.124328135	-0.263034406	0.184424571	0.514573173	2.473931188	1.434402824", "-0.485426827	-0.070389328	0.043943348	-0.333423734	0.120294234	3.473931188	3.836501268", "0.217591435	0.074000581	0.473931188	-0.275007047	-0.50589093	-1.443606651	-2.3305584", "0.120294234	0.514573173	0.434402824	1.089267338	0.888968688	2	2.395928676", "-0.124328135	-0.176322773	0.434402824	-0.084064265	-0.250961574	0.415037499	3.836501268", "0.01449957	0.01449957	-0.189033824	0.836501268	1	2.395928676	2.64385619", "-0.097610797	0.340075442	-0.028569152	0.074000581	0.251538767	3.058893689	2.473931188", "-0.056583528	-0.097610797	0.49410907	1.058893689	1.434402824	2.556393349	2.64385619", "0.286304185	0.01449957	-0.163498732	-0.443606651	-0.713695815	-2.09085343	-2.533563348", "0.184424571	-0.176322773	-0.084064265	-0.111031312	-0.111031312	-1.948600847	-3.065227623", "0.321928095	0.234465254	0.454031631	-0.111031312	-0.344828497	-1.929790998	-2.587364991", "0.184424571	-0.056583528	0.058893689	-0.35614381	-0.097610797	-1.910732662	-2.865918815", "0.217591435	-0.042644337	0.089267338	0.074000581	-0.310340121	-1.495695163	-2.324810603", "-0.344828497	-0.378511623	-0.286881148	-0.887525271	-0.86393845	-2.811471031	-2.09423607", "-0.176322773	-0.464668267	-0.50589093	-0.263034406	-0.201633861	0.514573173	2.395928676", "-0.263034406	-0.124328135	-0.189033824	0.59946207	0.286304185	2.473931188	2.736965594", "-0.111031312	-0.286881148	0.713118852	0.120294234	-0.137503524	1.286304185	3.321928095", "-0.22650853	-0.214124805	-0.056583528	0.76121314	1.251538767	2.64385619	1.785875195", "0.184424571	0.268816758	0.217591435	-0.925999419	-1.070389328	-2.545968369	-3.063502942", "0.074000581	-0.042644337	-0.298658316	-1	-0.687060688	-1.389566812	-2.422233001", "0.251538767	0.089267338	0.268816758	-0.855989697	-0.925999419	-1.5360529	-2.782408565", "0.304006187	0.01449957	0.454031631	-0.150559677	-0.22650853	-1.361768359	-2.477677328", "0.058893689	0.029146346	0.120294234	-0.765534746	-0.056583528	-1.475084883	-2.761285273", "0.104697379	0.434402824	0.454031631	1.888968688	2	3.321928095	2.556393349", "-0.124328135	0.120294234	0.268816758	-0.111031312	-0.485426827	1.64385619	2.736965594", "0.104697379	-0.028569152	0.217591435	0.621488377	0.377069649	3.058893689	1.514573173", "0.200912694	0.556393349	0.49410907	1.029146346	1.217591435	1.943416472	2.64385619", "-0.613531653	-0.659924558	0	0.184424571	-0.275007047	1.251538767	2.321928095", "0.184424571	0.217591435	0.200912694	0.089267338	0.120294234	-1.584962501	-2.568032105", "0.043943348	0.01449957	0.120294234	0.029146346	-0.298658316	-1.545968369	-2.59454855", "-0.189033824	-0.333423734	0.089267338	0.915935735	1.089267338	3.321928095	2.64385619", "0.321928095	0.473931188	0.304006187	-0.214124805	-0.669026766	-1.782408565	-2.558267634", "0.200912694	0.321928095	0.473931188	-0.084064265	-0.443606651	-1.807354922	-2.776103988", "-0.367371066	-0.40053793	0.395928676	1.058893689	0.862496476	2.556393349	1.434402824", "-0.084064265	-0.176322773	-0.35614381	-0.704871964	-0.50589093	-1.565597176	-2.378511623", "0.358453971	0.058893689	-0.454175893	-1.244887059	-1.220329955	-2.392317423	-2.13422094", "-0.111031312	0.59946207	0.535331733	0.862496476	0.810966176	2.836501268	1.888968688", "-0.22650853	-0.028569152	0.251538767	-0.163498732	-0.124328135	0.473931188	3.836501268", "-0.028569152	-0.310340121	0.029146346	-0.275007047	-0.545968369	-1.97819563	-2.655351829", "0.217591435	0.358453971	0.535331733	-0.650764559	-0.669026766	-2.403267722	-2.827819025", "0.074000581	-0.250961574	0.058893689	-0.23878686	-0.555816155	-1.735522177	-2.669026766", "0.340075442	0.029146346	-0.214124805	-0.613531653	-0.704871964	-1.895302621	-2.327687364", "-0.042644337	-0.028569152	0.13606155	-1.195347598	-0.970853654	-2.613531653	-2.207892852", "-0.575312331	-0.097610797	0.434402824	-0.111031312	-0.042644337	2.321928095	2.943416472", "0.217591435	0.217591435	0.395928676	0.01449957	-0.028569152	-1.580145484	-2.485426827", "-0.124328135	0.200912694	0.971430848	1.556393349	1.358453971	4.321928095	3.473931188", "-0.176322773	0.089267338	0.577766999	0.321928095	0.971430848	2.321928095	1.029146346", "0.074000581	0	-0.454175893	-1.275007047	-1.339137385	-1.851998837	-2.462052319", "0.13606155	0.535331733	0.713118852	1.736965594	1.473931188	3.184424571	2.64385619", "-0.411426246	-0.263034406	-0.201633861	-0.298658316	-0.111031312	2.321928095	2.321928095", "0.340075442	-0.042644337	0.340075442	0.321928095	-0.111031312	-1.361768359	-2.459431619", "0.217591435	0.104697379	0.321928095	-0.411426246	-0.831877241	-1.333423734	-2.596935142", "0.184424571	0.234465254	0.200912694	0.434402824	0.713118852	3.64385619	2.251538767", "-0.014355293	0.152003093	0.59946207	0.514573173	0.377069649	1.836501268	2.321928095", "0.152003093	0.120294234	0.184424571	-1.077242999	-1.275007047	-1.622930351	-2.731183242", "-0.084064265	0.473931188	1.029146346	1.785875195	2.120294234	3.058893689	3.184424571", "0.120294234	-0.22650853	-0.23878686	-1.15704371	-1.40599236	-2.671293372	-3", "-0.097610797	-0.367371066	-0.250961574	-1.182692298	-0.871843649	-2.801158656	-2.389566812", "0.152003093	0.943416472	0.377069649	-0.782408565	-0.97819563	-1.500802053	-2.339137385", "-0.070389328	-0.321928095	0.514573173	0.810966176	0.915935735	3.058893689	2.251538767", "-0.97819563	0.058893689	0.415037499	0.184424571	-0.189033824	2.473931188	1.556393349", "-0.23878686	-0.23878686	-0.097610797	0.089267338	0.64385619	1.785875195	2.321928095", "0	0.286304185	-0.214124805	-0.992768431	-0.214124805	-2.192194165	-2.397802962", "0.043943348	-0.367371066	-0.137503524	-0.389566812	-0.22650853	-0.722466024	-2.386810946", "-0.097610797	-0.042644337	0.304006187	-0.201633861	-0.084064265	-1.10433666	-2.746312766", "0.120294234	-0.028569152	-0.321928095	-0.495695163	-0.40053793	-2.195347598	-2.790772038", "-0.028569152	-0.214124805	-0.070389328	-1.176322773	-1.03562391	-1.207892852	-2.765534746", "-0.310340121	-0.042644337	0.713118852	-0.298658316	-0.263034406	0.76121314	3.184424571", "0.13606155	-0.028569152	0.304006187	-0.214124805	-0.201633861	-1.15704371	-2.797012978", "0.152003093	0.043943348	0.13606155	-0.432959407	-0.59454855	-2.021479727	-2.361768359", "0.13606155	0.089267338	0.074000581	0.104697379	0.268816758	2.321928095	2.058893689", "-0.163498732	-0.042644337	-0.070389328	-1.257010618	-1.195347598	-2.815575429	-3.13093087", "0.234465254	0.340075442	1.120294234	1.473931188	1.736965594	3.058893689	2.836501268", "-0.070389328	-0.250961574	0.104697379	0.862496476	0.785875195	2.64385619	1.689659879", "0.058893689	-0.214124805	0.01449957	-0.963474124	-0.879705766	-2.386810946	-1.189033824", "0.200912694	-0.189033824	0.120294234	-0.650764559	-0.90303827	-1.700439718	-2.622930351", "-0.286881148	0.029146346	0.13606155	-0.163498732	0.304006187	3.836501268	3.321928095", "-0.321928095	-0.23878686	-0.111031312	-0.150559677	0.029146346	0.76121314	2.321928095", "-0.22650853	-0.028569152	0.358453971	1.251538767	1.514573173	3.836501268	2.556393349", "0.01449957	0.058893689	0.358453971	0.64385619	0.49410907	2.736965594	1.689659879", "0.217591435	-0.124328135	0.251538767	-0.298658316	-0.545968369	-1.89917563	-2.482848283", "-0.389566812	-0.748461233	-0.344828497	-0.613531653	-1.111031312	-2.56315813	-2.495695163", "-0.124328135	0.104697379	0.49410907	0.13606155	0.888968688	2.395928676	1.120294234", "0.184424571	0.454031631	0.64385619	0.713118852	1.217591435	2.64385619	3.184424571", "-0.669026766	-0.189033824	0	-0.189033824	-0.298658316	1.473931188	3.64385619", "0.200912694	0.415037499	0.286304185	-0.495695163	-0.59454855	-1.739848103	-2.3950628", "0.268816758	-0.084064265	0.395928676	-0.163498732	-0.59454855	-1.807354922	-2.416839742", "-0.070389328	-0.028569152	0.286304185	0.184424571	0.089267338	2.556393349	1.689659879", "0.074000581	-0.028569152	0.104697379	0	0	-0.163498732	-2.301587647", "0.104697379	0.058893689	-0.137503524	-0.411426246	-0.555816155	-1.531069493	-2.655351829", "-0.111031312	-0.163498732	0.089267338	0.888968688	0.915935735	2.556393349	1.785875195", "-0.310340121	0.120294234	0.434402824	0	-0.070389328	1.321928095	2.64385619", "0.168122759	0.104697379	0.321928095	0.286304185	0.943416472	1.689659879	2.395928676", "-0.189033824	-0.070389328	0.473931188	0.268816758	0.13606155	2.321928095	2.058893689", "0.074000581	0	0.377069649	0.785875195	0.943416472	3.473931188	2.836501268", "0.074000581	0.074000581	-0.124328135	-0.367371066	-0.485426827	-1.695993813	-2.301587647", "0.200912694	0.029146346	0.234465254	-0.641546029	-0.378511623	-2.097610797	-2.963474124", "0.152003093	-0.014355293	0.340075442	-0.604071324	-0.641546029	-1.819668183	-3.09592442", "0	-0.028569152	0.434402824	0.043943348	0.64385619	0.666576266	2.473931188", "0.234465254	-0.014355293	0.251538767	-0.422233001	-0.454175893	-1.516015147	-2.531069493", "0	0.49410907	0.340075442	1	1.321928095	2.473931188	2.473931188", "0.089267338	-0.275007047	-0.150559677	-1.176322773	-1.584962501	-2.956056652	-3.075532631", "0.029146346	0.321928095	0.535331733	0.666576266	0.268816758	2.556393349	1.514573173", "0.058893689	0.089267338	0.152003093	-0.82374936	-0.22650853	-1.655351829	-2.533563348", "0.043943348	-0.014355293	0.395928676	-0.35614381	-0.042644337	-1.604071324	-2.767654798", "0.043943348	0.074000581	-0.097610797	-0.839959587	-1.176322773	-1.887525271	-2.456806149", "0.074000581	-0.176322773	-0.201633861	-0.887525271	-0.918386234	-1.695993813	-2.95419631", "0.152003093	0.120294234	0.395928676	0.810966176	0.915935735	2.058893689	2.321928095", "-0.23878686	-0.084064265	-0.275007047	0.200912694	0.556393349	1.514573173	2.64385619", "-0.070389328	0.043943348	0.043943348	-0.464668267	-0.056583528	0.304006187	2.321928095", "-0.214124805	-0.084064265	-0.263034406	0.666576266	0.915935735	2.184424571	2.473931188", "-0.485426827	-0.367371066	0.234465254	-0.367371066	-0.422233001	0.535331733	2.64385619", "-0.790772038	0.01449957	1.888968688	1.556393349	0.862496476	3.64385619	3.321928095", "0.104697379	-0.286881148	-0.189033824	-0.650764559	-0.799087306	-1.176322773	-2.40053793", "-0.111031312	1	0.058893689	-0.124328135	-0.275007047	2.058893689	2.836501268", "-0.070389328	-0.014355293	-0.042644337	-0.367371066	-0.214124805	-1.550900665	-2.56315813", "-0.042644337	0.49410907	0.415037499	0.184424571	-0.344828497	1.736965594	2.321928095", "-0.367371066	0.915935735	-0.50589093	0.268816758	0.089267338	4.058893689	3.058893689", "0.043943348	-0.150559677	0.043943348	-0.575312331	-0.485426827	-2.14404637	-2.63691458"]
points = convertPointsToArray(points, '\t')
centers = LloydAlgorithm(points, k, m)
createVisualization(centers, points)

#===============SOFT K-MEANS CLUSTERING================================================================================

k = 4
m = 7
beta = 2
precision = 10
centers = softKMeansClustering(points, k, m, beta, precision)
createVisualization(centers, points)

#===============HIERARCHICAL CLUSTERING================================================================================

n = 20
points = ["0.00 0.76 1.24 0.29 1.39 0.89 0.85 0.85 0.48 1.14 0.71 0.76 0.79 0.61 1.01 1.18 0.78 0.27 1.11 0.96", "0.76 0.00 0.63 0.68 1.44 1.21 1.21 1.24 1.36 0.96 0.74 0.71 1.09 0.86 1.76 1.65 1.07 0.84 0.96 1.11", "1.24 0.63 0.00 0.87 0.98 0.94 0.84 0.66 1.41 0.61 0.86 0.33 1.25 1.40 1.37 0.79 1.21 1.13 0.74 0.58", "0.29 0.68 0.87 0.00 1.23 0.84 0.87 0.63 0.76 0.80 0.98 0.89 0.47 1.21 1.16 0.89 1.22 0.42 1.42 0.74", "1.39 1.44 0.98 1.23 0.00 1.27 0.65 0.85 0.88 0.80 1.14 1.04 1.17 1.34 0.44 0.70 0.99 1.81 0.93 0.52", "0.89 1.21 0.94 0.84 1.27 0.00 1.29 0.80 1.31 0.49 0.66 0.96 1.10 1.37 0.94 0.68 0.51 0.64 1.07 1.07", "0.85 1.21 0.84 0.87 0.65 1.29 0.00 0.32 0.69 0.72 1.19 0.77 0.71 1.12 1.05 0.51 1.18 1.20 0.61 0.48", "0.85 1.24 0.66 0.63 0.85 0.80 0.32 0.00 0.94 0.42 0.92 0.67 0.52 1.59 1.07 0.37 1.06 0.98 0.62 0.44", "0.48 1.36 1.41 0.76 0.88 1.31 0.69 0.94 0.00 1.63 0.93 1.17 0.79 0.66 0.41 1.03 0.95 0.73 1.02 1.18", "1.14 0.96 0.61 0.80 0.80 0.49 0.72 0.42 1.63 0.00 0.96 0.75 0.90 1.69 1.33 0.51 0.90 1.23 0.88 0.43", "0.71 0.74 0.86 0.98 1.14 0.66 1.19 0.92 0.93 0.96 0.00 0.65 1.41 1.07 0.93 1.49 0.17 0.93 0.39 1.28", "0.76 0.71 0.33 0.89 1.04 0.96 0.77 0.67 1.17 0.75 0.65 0.00 1.45 0.88 1.15 0.95 0.84 0.91 0.57 0.41", "0.79 1.09 1.25 0.47 1.17 1.10 0.71 0.52 0.79 0.90 1.41 1.45 0.00 1.34 1.21 0.69 1.53 0.72 1.29 0.95", "0.61 0.86 1.40 1.21 1.34 1.37 1.12 1.59 0.66 1.69 1.07 0.88 1.34 0.00 0.94 1.46 0.92 0.66 1.06 1.26", "1.01 1.76 1.37 1.16 0.44 0.94 1.05 1.07 0.41 1.33 0.93 1.15 1.21 0.94 0.00 0.79 0.72 1.15 1.11 0.97", "1.18 1.65 0.79 0.89 0.70 0.68 0.51 0.37 1.03 0.51 1.49 0.95 0.69 1.46 0.79 0.00 1.34 1.03 1.16 0.43", "0.78 1.07 1.21 1.22 0.99 0.51 1.18 1.06 0.95 0.90 0.17 0.84 1.53 0.92 0.72 1.34 0.00 1.02 0.49 1.27", "0.27 0.84 1.13 0.42 1.81 0.64 1.20 0.98 0.73 1.23 0.93 0.91 0.72 0.66 1.15 1.03 1.02 0.00 1.33 1.22", "1.11 0.96 0.74 1.42 0.93 1.07 0.61 0.62 1.02 0.88 0.39 0.57 1.29 1.06 1.11 1.16 0.49 1.33 0.00 1.01", "0.96 1.11 0.58 0.74 0.52 1.07 0.48 0.44 1.18 0.43 1.28 0.41 0.95 1.26 0.97 0.43 1.27 1.22 1.01 0.00"]
matrix = convertPointsToMatrix(points)
tree = hierarchicalClustering(matrix, n)
for row in tree:
    row = [val+1 for val in row]
    row_str = ""
    for val in row:
        row_str+=str(val)+" "
    print(row_str[:-1])





